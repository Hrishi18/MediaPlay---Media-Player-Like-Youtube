// <auto-generated />
using LikeDislikeCommentAPI.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LikeDislikeCommentAPI.Migrations
{
    [DbContext(typeof(MediaPlayerContext))]
    [Migration("20220113052847_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("category_type");

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment_text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("VideoId")
                        .HasColumnType("bigint")
                        .HasColumnName("video_id");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Like", b =>
                {
                    b.Property<long>("VideoId")
                        .HasColumnType("bigint")
                        .HasColumnName("video_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit")
                        .HasColumnName("isLiked");

                    b.HasKey("VideoId", "UserId")
                        .HasName("PK__likes__036AFD60CF0F01AE");

                    b.HasIndex("UserId");

                    b.ToTable("likes");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Video", b =>
                {
                    b.Property<long>("VideoId")
                        .HasColumnType("bigint")
                        .HasColumnName("video_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("thumbnail_path");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("VideoDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_description");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("video_path");

                    b.Property<string>("VideoTag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("video_tag");

                    b.Property<string>("VideoTitle")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("video_title");

                    b.HasKey("VideoId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("videos");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Comment", b =>
                {
                    b.HasOne("LikeDislikeCommentAPI.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__comments__user_i__2B3F6F97")
                        .IsRequired();

                    b.HasOne("LikeDislikeCommentAPI.Model.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .HasConstraintName("FK__comments__video___2A4B4B5E")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Like", b =>
                {
                    b.HasOne("LikeDislikeCommentAPI.Model.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__likes__user_id__300424B4")
                        .IsRequired();

                    b.HasOne("LikeDislikeCommentAPI.Model.Video", "Video")
                        .WithMany("Likes")
                        .HasForeignKey("VideoId")
                        .HasConstraintName("FK__likes__video_id__2F10007B")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Video", b =>
                {
                    b.HasOne("LikeDislikeCommentAPI.Model.Category", "Category")
                        .WithMany("Videos")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__videos__category__276EDEB3")
                        .IsRequired();

                    b.HasOne("LikeDislikeCommentAPI.Model.User", "User")
                        .WithMany("Videos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__videos__user_id__2C3393D0")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Category", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("LikeDislikeCommentAPI.Model.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
